//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""PlayerOW"",
            ""id"": ""780a6df6-6c93-4c44-9c13-f8ed734c4b8a"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""2dcd433d-9e09-481b-809b-430aaaf40700"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""5a0a0792-4cf6-4363-a542-76ecc0fe6f5d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""dae7195a-7dcb-439b-ab30-ce9e73c9b430"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0083465a-9697-451e-92e7-f792aa6759a6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PlayerBattle"",
            ""id"": ""41e0d9c7-e61b-4f4e-8fec-f182460925b5"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""7a2d7e22-0bb0-41c7-948e-b03d7e3cb2d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""24993acd-3a27-4342-9c4a-b3e925b39277"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerOW
        m_PlayerOW = asset.FindActionMap("PlayerOW", throwIfNotFound: true);
        m_PlayerOW_Movement = m_PlayerOW.FindAction("Movement", throwIfNotFound: true);
        // PlayerBattle
        m_PlayerBattle = asset.FindActionMap("PlayerBattle", throwIfNotFound: true);
        m_PlayerBattle_Newaction = m_PlayerBattle.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerOW
    private readonly InputActionMap m_PlayerOW;
    private IPlayerOWActions m_PlayerOWActionsCallbackInterface;
    private readonly InputAction m_PlayerOW_Movement;
    public struct PlayerOWActions
    {
        private @Inputs m_Wrapper;
        public PlayerOWActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerOW_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerOW; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerOWActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerOWActions instance)
        {
            if (m_Wrapper.m_PlayerOWActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerOWActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerOWActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerOWActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_PlayerOWActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public PlayerOWActions @PlayerOW => new PlayerOWActions(this);

    // PlayerBattle
    private readonly InputActionMap m_PlayerBattle;
    private IPlayerBattleActions m_PlayerBattleActionsCallbackInterface;
    private readonly InputAction m_PlayerBattle_Newaction;
    public struct PlayerBattleActions
    {
        private @Inputs m_Wrapper;
        public PlayerBattleActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_PlayerBattle_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerBattle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerBattleActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerBattleActions instance)
        {
            if (m_Wrapper.m_PlayerBattleActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_PlayerBattleActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_PlayerBattleActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_PlayerBattleActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_PlayerBattleActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public PlayerBattleActions @PlayerBattle => new PlayerBattleActions(this);
    public interface IPlayerOWActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IPlayerBattleActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
